// <auto-generated />
using System;
using Inbox0.Web.Services.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Inbox0.Web.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220306162902_InboxMessageReplyToExternalIdNullable")]
    partial class InboxMessageReplyToExternalIdNullable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Inbox0.Core.Models.Database.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Inbox0.Core.Models.Database.Inbox", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Inboxes");
                });

            modelBuilder.Entity("Inbox0.Core.Models.Database.InboxConversation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InboxId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LastMessageDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MessageCount")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InboxId");

                    b.ToTable("InboxConversations");
                });

            modelBuilder.Entity("Inbox0.Core.Models.Database.InboxMessage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConversationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InboxId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReplyToExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("InboxId");

                    b.ToTable("InboxMessages");
                });

            modelBuilder.Entity("Inbox0.Core.Models.Database.MailAccount", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IncomingPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IncomingPort")
                        .HasColumnType("int");

                    b.Property<string>("IncomingProtocol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IncomingServer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("LastUid")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutgoingPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OutgoingPort")
                        .HasColumnType("int");

                    b.Property<string>("OutgoingProtocol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutgoingServer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("MailAccounts");
                });

            modelBuilder.Entity("Inbox0.Core.Models.Database.Inbox", b =>
                {
                    b.HasOne("Inbox0.Core.Models.Database.MailAccount", "Owner")
                        .WithMany("Inboxes")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Inbox0.Core.Models.Database.InboxConversation", b =>
                {
                    b.HasOne("Inbox0.Core.Models.Database.Inbox", "Inbox")
                        .WithMany("Conversations")
                        .HasForeignKey("InboxId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Inbox");
                });

            modelBuilder.Entity("Inbox0.Core.Models.Database.InboxMessage", b =>
                {
                    b.HasOne("Inbox0.Core.Models.Database.InboxConversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Inbox0.Core.Models.Database.Inbox", "Inbox")
                        .WithMany("Messages")
                        .HasForeignKey("InboxId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("Inbox");
                });

            modelBuilder.Entity("Inbox0.Core.Models.Database.MailAccount", b =>
                {
                    b.HasOne("Inbox0.Core.Models.Database.AppUser", "Owner")
                        .WithMany("MailAccounts")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Inbox0.Core.Models.Database.AppUser", b =>
                {
                    b.Navigation("MailAccounts");
                });

            modelBuilder.Entity("Inbox0.Core.Models.Database.Inbox", b =>
                {
                    b.Navigation("Conversations");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Inbox0.Core.Models.Database.InboxConversation", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Inbox0.Core.Models.Database.MailAccount", b =>
                {
                    b.Navigation("Inboxes");
                });
#pragma warning restore 612, 618
        }
    }
}
